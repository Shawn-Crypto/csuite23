#!/usr/bin/env node

/**
 * Build Configuration System - LFG Ventures Gold Standard
 * 
 * Based on the production system that achieved:
 * - Seamless SANDBOX ↔ PRODUCTION switching
 * - Environment-specific configuration
 * - Build-time optimization
 * - Zero configuration errors
 * 
 * This generates runtime configuration files based on environment variables
 */

require('dotenv').config();
const fs = require('fs');
const path = require('path');

// Environment detection
const environment = process.env.RAZORPAY_ENVIRONMENT || process.env.NODE_ENV || 'SANDBOX';
const isProduction = environment === 'PRODUCTION';

console.log(`🔧 Building configuration for environment: ${environment}`);

// Razorpay Configuration
const razorpayConfig = {
    environment: environment,
    keyId: isProduction 
        ? process.env.RAZORPAY_KEY_ID_PRODUCTION 
        : process.env.RAZORPAY_KEY_ID_SANDBOX,
    keySecret: isProduction 
        ? process.env.RAZORPAY_KEY_SECRET_PRODUCTION 
        : process.env.RAZORPAY_KEY_SECRET_SANDBOX,
    webhookSecret: isProduction 
        ? process.env.RAZORPAY_WEBHOOK_SECRET_PRODUCTION 
        : process.env.RAZORPAY_WEBHOOK_SECRET_SANDBOX
};

// Meta/Facebook Configuration
const metaConfig = {
    pixelId: process.env.META_PIXEL_ID || '726737740336667',
    accessToken: process.env.META_ACCESS_TOKEN,
    testEventCode: process.env.META_TEST_EVENT_CODE,
    enabled: !!(process.env.META_PIXEL_ID && process.env.META_ACCESS_TOKEN)
};

// Analytics Configuration - GTM/GA4 DISABLED
const analyticsConfig = {
    gtmId: null, // GTM removed - using direct tracking
    ga4MeasurementId: null, // GA4 removed - no Google Ads
    ga4PropertyId: null, // GA4 removed - no Google Ads
    enabled: false // Analytics disabled - using direct Meta tracking
};

// Zapier Configuration
const zapierConfig = {
    webhookUrl: process.env.ZAPIER_WEBHOOK_URL,
    leadWebhookUrl: process.env.ZAPIER_LEAD_WEBHOOK_URL,
    enabled: !!process.env.ZAPIER_WEBHOOK_URL
};

// Performance Configuration
const performanceConfig = {
    webhookTimeout: parseInt(process.env.WEBHOOK_TIMEOUT || '15000'),
    retryAttempts: parseInt(process.env.RETRY_ATTEMPTS || '3'),
    enableCaching: process.env.ENABLE_CACHING === 'true',
    enableCompression: process.env.ENABLE_COMPRESSION !== 'false'
};

// Security Configuration
const securityConfig = {
    enableCSP: process.env.ENABLE_CSP !== 'false',
    trustedDomains: [
        'lotuslion.in',
        'www.lotuslion.in',
        'checkout.razorpay.com',
        'api.razorpay.com',
        'connect.facebook.net',
        'www.facebook.com',
        'www.googletagmanager.com',
        'www.google-analytics.com'
    ],
    allowedScriptSources: [
        "'self'",
        "'unsafe-inline'",
        'https://checkout.razorpay.com',
        'https://connect.facebook.net',
        'https://www.googletagmanager.com'
    ]
};

// Complete configuration object
const config = {
    environment,
    isProduction,
    buildTime: new Date().toISOString(),
    version: process.env.npm_package_version || '1.7.0',
    razorpay: razorpayConfig,
    meta: metaConfig,
    analytics: analyticsConfig,
    zapier: zapierConfig,
    performance: performanceConfig,
    security: securityConfig
};

// Generate JavaScript configuration file
const jsConfig = `
/**
 * Auto-generated Runtime Configuration
 * Generated at: ${config.buildTime}
 * Environment: ${environment}
 * Version: ${config.version}
 * 
 * DO NOT EDIT - This file is automatically generated during build
 */

window.GLOBAL_CONFIG = ${JSON.stringify(config, null, 2)};

// Backward compatibility
window.GLOBAL_RAZORPAY_ENVIRONMENT = "${environment}";
window.GLOBAL_RAZORPAY_KEY_ID = "${razorpayConfig.keyId || ''}";

// Configuration helpers
window.getConfig = function(path) {
    return path.split('.').reduce((obj, key) => obj && obj[key], window.GLOBAL_CONFIG);
};

window.isProduction = function() {
    return window.GLOBAL_CONFIG.isProduction;
};

window.isSandbox = function() {
    return !window.GLOBAL_CONFIG.isProduction;
};

console.log('✅ Runtime configuration loaded:', {
    environment: window.GLOBAL_CONFIG.environment,
    version: window.GLOBAL_CONFIG.version,
    razorpay: !!window.GLOBAL_CONFIG.razorpay.keyId,
    meta: window.GLOBAL_CONFIG.meta.enabled,
    analytics: window.GLOBAL_CONFIG.analytics.enabled,
    zapier: window.GLOBAL_CONFIG.zapier.enabled
});
`;

// Generate JSON configuration file for server-side use
const jsonConfig = JSON.stringify(config, null, 2);

// Write configuration files
const configDir = path.join(__dirname, '..', 'js');
const configFile = path.join(configDir, 'config.js');
const jsonConfigFile = path.join(configDir, 'config.json');

try {
    // Ensure directory exists
    if (!fs.existsSync(configDir)) {
        fs.mkdirSync(configDir, { recursive: true });
    }
    
    // Write JavaScript configuration
    fs.writeFileSync(configFile, jsConfig);
    console.log(`✅ JavaScript config written to: ${configFile}`);
    
    // Write JSON configuration
    fs.writeFileSync(jsonConfigFile, jsonConfig);
    console.log(`✅ JSON config written to: ${jsonConfigFile}`);
    
    // Configuration validation
    console.log('\n📋 Configuration Summary:');
    console.log(`Environment: ${environment}`);
    console.log(`Razorpay: ${razorpayConfig.keyId ? '✅ Configured' : '❌ Missing'}`);
    console.log(`Meta Pixel: ${metaConfig.enabled ? '✅ Enabled' : '❌ Disabled'}`);
    console.log(`Analytics: ${analyticsConfig.enabled ? '✅ Enabled' : '❌ Disabled'}`);
    console.log(`Zapier: ${zapierConfig.enabled ? '✅ Enabled' : '❌ Disabled'}`);
    
    // Warnings for missing configuration
    const warnings = [];
    
    if (!razorpayConfig.keyId) {
        warnings.push('Razorpay Key ID is missing');
    }
    
    if (!metaConfig.accessToken) {
        warnings.push('Meta Access Token is missing');
    }
    
    if (!zapierConfig.webhookUrl) {
        warnings.push('Zapier Webhook URL is missing');
    }
    
    if (warnings.length > 0) {
        console.log('\n⚠️  Configuration Warnings:');
        warnings.forEach(warning => console.log(`   - ${warning}`));
    }
    
    // Generate environment-specific files
    generateEnvironmentFiles(config);
    
    console.log('\n🎯 Build configuration completed successfully!');
    
} catch (error) {
    console.error('❌ Error generating configuration:', error);
    process.exit(1);
}

/**
 * Generate environment-specific configuration files
 */
function generateEnvironmentFiles(config) {
    const templatesDir = path.join(__dirname, '..', 'templates');
    const outputDir = path.join(__dirname, '..');
    
    // Generate .env template
    const envTemplate = `# Auto-generated Environment Template
# Generated at: ${config.buildTime}
# Environment: ${config.environment}

# Razorpay Configuration
RAZORPAY_ENVIRONMENT=${config.environment}
RAZORPAY_KEY_ID_PRODUCTION=rzp_live_XXXXXXXXX
RAZORPAY_KEY_SECRET_PRODUCTION=XXXXXXXXX
RAZORPAY_KEY_ID_SANDBOX=rzp_test_XXXXXXXXX
RAZORPAY_KEY_SECRET_SANDBOX=XXXXXXXXX
RAZORPAY_WEBHOOK_SECRET_PRODUCTION=XXXXXXXXX
RAZORPAY_WEBHOOK_SECRET_SANDBOX=XXXXXXXXX

# Meta/Facebook Configuration
META_PIXEL_ID=${config.meta.pixelId}
META_ACCESS_TOKEN=EAAxxxxxxxxxxxxxxx
META_TEST_EVENT_CODE=TEST12345

# Analytics Configuration
# GTM_CONTAINER_ID=${config.analytics.gtmId} # REMOVED - using direct tracking
GA4_MEASUREMENT_ID=${config.analytics.ga4MeasurementId}
GA4_PROPERTY_ID=${config.analytics.ga4PropertyId}

# Zapier Configuration
ZAPIER_WEBHOOK_URL=https://hooks.zapier.com/hooks/catch/xxxxx
ZAPIER_LEAD_WEBHOOK_URL=https://hooks.zapier.com/hooks/catch/xxxxx

# Performance Configuration
WEBHOOK_TIMEOUT=${config.performance.webhookTimeout}
RETRY_ATTEMPTS=${config.performance.retryAttempts}
ENABLE_CACHING=${config.performance.enableCaching}
ENABLE_COMPRESSION=${config.performance.enableCompression}

# Security Configuration
ENABLE_CSP=${config.security.enableCSP}
`;

    // Write environment template
    const envTemplateFile = path.join(outputDir, '.env.template');
    fs.writeFileSync(envTemplateFile, envTemplate);
    console.log(`✅ Environment template written to: ${envTemplateFile}`);
    
    // Generate deployment configuration
    const deploymentConfig = {
        environment: config.environment,
        buildTime: config.buildTime,
        version: config.version,
        requiredEnvVars: [
            'RAZORPAY_KEY_ID_PRODUCTION',
            'RAZORPAY_KEY_SECRET_PRODUCTION',
            'META_PIXEL_ID',
            'META_ACCESS_TOKEN'
        ],
        optionalEnvVars: [
            'ZAPIER_WEBHOOK_URL',
            'GA4_MEASUREMENT_ID',
            'META_TEST_EVENT_CODE'
        ],
        healthChecks: [
            '/api/health',
            '/api/health-check'
        ],
        performance: config.performance
    };
    
    const deploymentConfigFile = path.join(outputDir, 'deployment.json');
    fs.writeFileSync(deploymentConfigFile, JSON.stringify(deploymentConfig, null, 2));
    console.log(`✅ Deployment config written to: ${deploymentConfigFile}`);
}

// Export for programmatic use
module.exports = {
    config,
    generateConfig: () => config,
    isProduction: () => isProduction,
    getEnvironment: () => environment
};